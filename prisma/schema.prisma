generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AP_Report {
  AP_ID                    Int       @id @default(autoincrement())
  /// * ✨ NEW – replaces StartEndDate
  StartDate                DateTime? @db.Timestamptz(6)
  EndDate                  DateTime? @db.Timestamptz(6)
  AgencyAuthorizedUser     String
  TaskOrderNumber          String
  CandidateName            String
  Region                   Int
  JobTitle                 String
  SkillLevel               Int
  TotalHours               Decimal   @db.Decimal
  TimesheetApprovalDate    DateTime? @db.Timestamptz(6)
  HourlyWageRateBase       Decimal   @db.Decimal
  MarkUpPercent            Decimal   @db.Decimal
  HourlyWageRateWithMarkup Decimal   @db.Decimal
  TotalBilledOGSClient     Decimal   @db.Decimal
  PaidToVendor             Decimal   @db.Decimal
  VendorName               String
  /// * ✨ NEW columns
  VendorHours              Decimal?  @db.Decimal
  HoursMatchInvoice        Boolean
  VendorInvoiceRemarks     String?
  InvoiceNumber            String
  VendorInvoiceDate        DateTime? @db.Timestamptz(6)
  TimesheetsApproved       Boolean
  Remark                   String
  PaymentTermNet           Int
  PaymentMode              String
  PaymentDueDate           DateTime? @db.Timestamptz(6)
  Check                    String    @default("") @db.VarChar(20)
}

model AspNetRoleClaims {
  Id          Int         @id(map: "PK_AspNetRoleClaims") @default(autoincrement())
  RoleId      String
  ClaimType   String?
  ClaimValue  String?
  AspNetRoles AspNetRoles @relation(fields: [RoleId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetRoleClaims_AspNetRoles_RoleId")

  @@index([RoleId], map: "IX_AspNetRoleClaims_RoleId")
}

model AspNetRoles {
  Id               String             @id(map: "PK_AspNetRoles")
  Name             String?            @db.VarChar(256)
  NormalizedName   String?            @unique(map: "RoleNameIndex") @db.VarChar(256)
  ConcurrencyStamp String?
  AspNetRoleClaims AspNetRoleClaims[]
  AspNetUserRoles  AspNetUserRoles[]
}

model AspNetUserClaims {
  Id          Int         @id(map: "PK_AspNetUserClaims") @default(autoincrement())
  UserId      String
  ClaimType   String?
  ClaimValue  String?
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserClaims_AspNetUsers_UserId")

  @@index([UserId], map: "IX_AspNetUserClaims_UserId")
}

model AspNetUserLogins {
  LoginProvider       String
  ProviderKey         String
  ProviderDisplayName String?
  UserId              String
  AspNetUsers         AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserLogins_AspNetUsers_UserId")

  @@id([LoginProvider, ProviderKey], map: "PK_AspNetUserLogins")
  @@index([UserId], map: "IX_AspNetUserLogins_UserId")
}

model AspNetUserRoles {
  UserId      String
  RoleId      String
  AspNetRoles AspNetRoles @relation(fields: [RoleId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserRoles_AspNetRoles_RoleId")
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserRoles_AspNetUsers_UserId")

  @@id([UserId, RoleId], map: "PK_AspNetUserRoles")
  @@index([RoleId], map: "IX_AspNetUserRoles_RoleId")
}

model AspNetUserTokens {
  UserId        String
  LoginProvider String
  Name          String
  Value         String?
  AspNetUsers   AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserTokens_AspNetUsers_UserId")

  @@id([UserId, LoginProvider, Name], map: "PK_AspNetUserTokens")
}

model AspNetUsers {
  Id                   String             @id(map: "PK_AspNetUsers")
  UserName             String?            @db.VarChar(256)
  NormalizedUserName   String?            @unique(map: "UserNameIndex") @db.VarChar(256)
  Email                String?            @db.VarChar(256)
  NormalizedEmail      String?            @db.VarChar(256)
  EmailConfirmed       Boolean
  PasswordHash         String?
  SecurityStamp        String?
  ConcurrencyStamp     String?
  PhoneNumber          String?
  PhoneNumberConfirmed Boolean
  TwoFactorEnabled     Boolean
  LockoutEnd           DateTime?          @db.Timestamptz(6)
  LockoutEnabled       Boolean
  AccessFailedCount    Int
  IsApproved           Boolean            @default(false)
  Name                 String             @default("")
  AspNetUserClaims     AspNetUserClaims[]
  AspNetUserLogins     AspNetUserLogins[]
  AspNetUserRoles      AspNetUserRoles[]
  AspNetUserTokens     AspNetUserTokens[]

  @@index([NormalizedEmail], map: "EmailIndex")
}

model EFMigrationsHistory {
  MigrationId    String @id(map: "PK___EFMigrationsHistory") @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}

model ap_report {
  ap_id                 Int       @id @default(autoincrement())
  startenddate          DateTime? @db.Date
  agency                String?   @db.VarChar(255)
  taskordernumber       String?   @db.VarChar(50)
  consultantname        String?   @db.VarChar(255)
  region                Int?
  jobtitle              String?   @db.VarChar(255)
  skilllevel            Int?
  totalhours            Float?
  timesheetapprovaldate DateTime? @db.Date
  hourlywagerate        Decimal?  @db.Decimal(10, 2)
  vendorname            String?   @db.VarChar(255)
  invoicenumber         String?   @db.VarChar(50)
  invoicedate           DateTime? @db.Date
  paymentmode           String?   @db.VarChar(50)
  paymentduedate        DateTime? @db.Date
  monthyear             String?   @db.VarChar(7)
}

model interviews {
  interviewid                  Int       @id @default(autoincrement())
  hbits_no                     String?
  position                     String?
  level                        Int?
  mailreceiveddate             DateTime? @db.Date
  consultantname               String?
  clientsuggesteddates         String?
  maileddatestoconsultant      DateTime? @db.Date
  interviewtimeoptedfor        String?
  interviewscheduledmailedtomr Boolean?
  interviewconfirmedbyclient   DateTime? @db.Date
  timeofinterview              DateTime? @db.Timestamp(6)
  thrurecruiter                String?
  consultantcontactno          String?
  consultantemail              String?
  vendorpocname                String?
  vendornumber                 String?
  vendoremailid                String?
  candidateselected            String?
  monthyear                    String?   @db.VarChar(20)
  clientconfmailreceived       Boolean?
  confemailccvendor            Boolean?
  mailreceivedfromconsultant   Boolean?
  mailsenttoconsultant         Boolean?
  remark                       String?
  status                       String?
}

model onboarding {
  onboardingid               Int       @id @default(autoincrement())
  taskOrder                  String?
  clientAgencyName           String?
  form2FormB                 String?
  resumeAndForm1FormB        String?
  agencyNameFromForm1        String?
  employerNameMatchMsa       String?
  dateOfConfirmation         DateTime? @db.Timestamptz(6)
  recruiterName              String?
  expectedOnboardingDate     DateTime? @db.Timestamptz(6)
  actualStartDate            DateTime? @db.Timestamptz(6)
  endDate                    DateTime? @db.Timestamptz(6)
  engagementLengthMonths     String?
  consultantName             String?
  dob                        DateTime? @db.Timestamptz(6)
  currentLocation            String?
  consultantPhone            String?
  consultantEmail            String?
  hiringTerm                 String?
  consultantMailingAddress   String?
  onboardingLetterReceived   String?
  billRateFromClient         String?
  fingerPrintingRequired     String?
  backgroundCheckRequired    String?
  trackSubmission            String?
  remoteLoginCredentials     String?
  nonCompeteAgreement        String?
  idDocsRequired             String?
  onboardingEmailToCandidate String?
  coreForm                   String?
  telecommuting              String?
  softcopyBeforeMail         String?
  employerNameConsistency    String?
  vendorName                 String?
  vendorPocPhone             String?
  vendorPocEmail             String?
  payRateToVendor            String?
  vendorFedId                String?
  vendorAddress              String?
  msaEmploymentLetter        String?
  workOrder                  String?
  w9                         String?
  coi                        String?
  billingTerms               String?
  onboardingEmailToVendor    String?
  postOnboardingVendorBGC    String?
  firstDayInstructions       String?
  completeI9                 String?
  createAccountAdp           String?
  simpleIraInclusion         String?
  offerLetter                String?
  uploadPayrollInfoCeipal    String?
  timesheets                 String?
  trackingArrivalDetails     String?
  allVerificationsDone       String?
  allFilesUploaded           String?
  actualEndDate              DateTime? @db.Timestamptz(6)
  noticePeriod               String?
  returnOfAssets             String?
  refundDeposit              String?
  closeSimpleIra             String?
  terminateEmploymentAdp     String?
  exitInterview              String?
  createddate                DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
}

model sheet_config {
  id          Int      @id @default(autoincrement())
  table_key   String   @unique @db.VarChar(20)
  sheet_url   String
  updated_utc DateTime @default(now()) @db.Timestamptz(6)
}

model todo_list {
  taskid          Int       @id @default(autoincrement())
  category        String?   @db.VarChar(255)
  taskname        String?
  triggerdate     DateTime? @db.Date
  assignedto      String?   @db.VarChar(255)
  internalduedate DateTime? @db.Date
  actualduedate   DateTime? @db.Date
  status          String?   @db.VarChar(50)
  requiresfiling  Boolean?
  filed           Boolean?
  followupneeded  Boolean?
  recurring       Boolean?
  nextduedate     DateTime? @db.Date
  note            String?
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  website     String?
  description String?
  industry    String?
  size        String?
  location    String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  jobs        Job[]
}

model Job {
  id                  Int                   @id @default(autoincrement())
  title               String
  description         String
  requirements        String?
  salaryMin           Decimal?              @db.Decimal(5, 2)
  salaryMax           Decimal?              @db.Decimal(5, 2)
  location            String?
  isRemote            Boolean               @default(false)
  employmentType      String?
  status              String                @default("active")
  postedDate          DateTime              @default(now()) @db.Timestamptz(6)
  expiryDate          DateTime?             @db.Timestamptz(6)
  companyId           Int?
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @updatedAt @db.Timestamptz(6)
  aiExtractJson       String?
  aiSummary           String?
  applicationQuery    String?
  companyName         String?
  last_email_sync_at  DateTime?             @db.Timestamptz(6)
  company             Company?              @relation(fields: [companyId], references: [id])
  applications        JobApplication[]
  job_embeddings      job_embeddings[]
  import_email_runs   import_email_runs[]
  import_email_items  import_email_items[]
}

model Resume {
  id                    Int                 @id @default(autoincrement())
  fileName              String
  originalName          String
  fileSize              Int
  mimeType              String
  storagePath           String
  uploadedBy            String?
  skills                String?
  experience            String?
  education             String?
  createdAt             DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime            @updatedAt @db.Timestamptz(6)
  aiExtractJson         String?
  aiSummary             String?
  sourceType            String              @default("upload")
  sourceMessageId       String?
  sourceSubject         String?
  sourceFrom            String?
  sourcePath            String?
  fileHash              String?
  fileSizeBytes         Int?
  fileStorageUrl        String?
  rawText               String?
  companies             String?
  employmentHistoryJson String?
  totalExperienceY      Decimal?            @db.Decimal(5, 2)
  parsedAt              DateTime?           @db.Timestamptz(6)
  candidateName         String?
  companyScore          Decimal?            @db.Decimal(5, 2)
  email                 String?
  fakeScore             Decimal?            @db.Decimal(5, 2)
  parseError            String?
  parseModel            String?
  phone                 String?
  promptVersion         String?
  textHash              String?
  contactInfo           String?
  parsedText            String?
  applications          JobApplication[]
  resume_embeddings     resume_embeddings[]

  @@index([fileHash])
  @@index([sourceMessageId])
  @@index([parsedAt])
}

model JobApplication {
  id                  Int      @id @default(autoincrement())
  jobId               Int
  resumeId            Int
  external_message_id String?
  status              String   @default("submitted")
  appliedDate         DateTime @default(now()) @db.Timestamptz(6)
  notes               String?
  createdAt           DateTime @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime @updatedAt @db.Timestamptz(6)
  matchScore          Decimal? @db.Decimal(5, 2)
  aiExtractJson       Json?
  aiCompanyScore      Decimal? @db.Decimal(5, 2)
  job                 Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  resume              Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([jobId, resumeId])
  @@index([resumeId])
  @@index([jobId])
}

model EmailIngestLog {
  id            Int       @id @default(autoincrement())
  emailId       String    @unique
  subject       String
  sender        String
  recipient     String
  receivedDate  DateTime  @db.Timestamptz(6)
  bodyText      String?
  bodyHtml      String?
  attachments   String?
  processed     Boolean   @default(false)
  processedDate DateTime? @db.Timestamptz(6)
  errorMessage  String?
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(6)
  aiExtractJson String?
  aiSummary     String?
}

model job_embeddings {
  id           Int                   @id @default(autoincrement())
  job_id       Int
  content_hash String
  embedding    Unsupported("vector")
  chunk_text   String?
  metadata     Json?
  created_at   DateTime              @default(now()) @db.Timestamptz(6)
  updated_at   DateTime              @default(now()) @db.Timestamptz(6)
  Job          Job                   @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_job_embeddings_job_id")

  @@unique([job_id, content_hash], map: "idx_job_embeddings_unique")
  @@index([job_id], map: "idx_job_embeddings_job_id")
  @@index([embedding], map: "idx_job_embeddings_vector")
}

model resume_embeddings {
  id           Int                   @id @default(autoincrement())
  resume_id    Int
  content_hash String
  embedding    Unsupported("vector")
  chunk_text   String?
  metadata     Json?
  created_at   DateTime              @default(now()) @db.Timestamptz(6)
  updated_at   DateTime              @default(now()) @db.Timestamptz(6)
  Resume       Resume                @relation(fields: [resume_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_resume_embeddings_resume_id")

  @@unique([resume_id, content_hash], map: "idx_resume_embeddings_unique")
  @@index([resume_id], map: "idx_resume_embeddings_resume_id")
  @@index([embedding], map: "idx_resume_embeddings_vector")
}

model import_email_runs {
  id                 String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id             Int
  requested_by       String?
  status             String
  created_at         DateTime              @default(now()) @db.Timestamptz(6)
  started_at         DateTime?             @db.Timestamptz(6)
  finished_at        DateTime?             @db.Timestamptz(6)
  progress           Decimal               @default(0) @db.Decimal(5, 2)
  total_messages     Int?
  processed_messages Int                   @default(0)
  attempts           Int                   @default(0)
  last_error         String?
  since              DateTime?             @db.Timestamptz(6)
  page_cursor        String?
  meta               Json?
  Job                Job                   @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items              import_email_items[]

  @@index([status, created_at(sort: Desc)])
  @@index([job_id, created_at(sort: Desc)])
}

model import_email_items {
  id                  BigInt              @id @default(autoincrement())
  run_id              String              @db.Uuid
  job_id              Int
  external_message_id String
  external_thread_id  String?
  received_at         DateTime?           @db.Timestamptz(6)
  status              String              @default("pending")
  step                String              @default("none")
  attempts            Int                 @default(0)
  last_error          String?
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  updated_at          DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  run                 import_email_runs   @relation(fields: [run_id], references: [id], onDelete: Cascade)
  Job                 Job                 @relation(fields: [job_id], references: [id], onDelete: Cascade)

  @@unique([run_id, external_message_id])
  @@index([run_id, status, id])
  @@index([job_id])
}
